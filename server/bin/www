#!/usr/bin/env node

/**
 * Module dependencies.
 */
'use strict';
var app = require('../app');
var debug = require('debug')('cscie31-04:server');
var http = require('http');

var https = require('https');
https.globalAgent.maxSockets = 50;

const credentials = require('./config/ssl_config');

require('dotenv').config();

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.APP_PORT || '3000');
var secured_port = normalizePort(process.env.APP_SECURED_PORT || '3443');

// Create HTTPS server.
var secured_server = https.createServer(credentials, app);
secured_server.listen(secured_port);
secured_server.on('error', onError);
secured_server.on('listening', onListening);

var server = http.createServer(app);
server.listen(port);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'? 'Pipe ' + port: 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'? 'pipe ' + addr: 'port ' + addr.port;
  debug('Listening on ' + bind);
}